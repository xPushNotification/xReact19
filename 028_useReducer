-- useState нужен для управления
   простыми значениями в простых сценариях
   useReducer шлет сообщения в один метод
   в дополнение с объектом которым нагружает
   это сообщение

пример с useState:
------------------
import React, {useState} from "react"
const UseStateR = () => {
  const [count, setCount] = useState(0)
  const increment = () => {
    setCount(count+1)
  }
  const decrement = () => {
    setCount(count-1)
  }
  return (
   <div>
     <p>{count}</p>
     <button onClick={oncrement}>+</button>
     <button onClick={decrement}>-</button>
   </div>
  )
}
export default UseStateR

пример с useReducer:
--------------------
import React, {useReducer} from "react"
const UseReducer = () => {
  const i = {count:0}  // <- обязательно объект
  const [state,dispatch] = useReducer(fnReducer, i)
  const increment = () => {
    dispatch({type:"increment"})
  }
  const decrement = () => {
    dispatch({type:"decrement"})
  }
  return (
    <div>
      <p>{state.count}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
    </div>
  )
}

[UseReducer.js]
// reducer function
const fnReducer = (state, action) => {
  switch(action.type){
    case "increment":
      return {count:state.count+1}
    case "decrement":
      return {count:state.count-1}
    default:
      return state
  }
}
export default UseReducer

// начальное состояние может быть крупным объектом
const initialState = {
  user : {
    name: "John", age: 30,
  },
  isLoggedIn: false,
}
const [state, dispatch]
  = useReducer(reducer, initialState)



